
D0003E_Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000204  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000223  00800102  00800102  0000029a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010cc  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b66  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a7  00000000  00000000  00001fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00002570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000537  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008d8  00000000  00000000  00002c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00003547  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e4 e0       	ldi	r30, 0x04	; 4
  70:	f2 e0       	ldi	r31, 0x02	; 2
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a2 30       	cpi	r26, 0x02	; 2
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a2 e0       	ldi	r26, 0x02	; 2
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a5 32       	cpi	r26, 0x25	; 37
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  92:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <main>:

int main() {
	return 0;
    spawn(computePrimes, 0);
    computePrimes(3);
}
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	08 95       	ret

000000a0 <dispatch>:
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	00 d0       	rcall	.+0      	; 0xa6 <dispatch+0x6>
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	9a 83       	std	Y+2, r25	; 0x02
  ac:	89 83       	std	Y+1, r24	; 0x01
  ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b6:	06 96       	adiw	r24, 0x06	; 6
  b8:	0e 94 bf 00 	call	0x17e	; 0x17e <setjmp>
  bc:	89 2b       	or	r24, r25
  be:	29 f0       	breq	.+10     	; 0xca <dispatch+0x2a>
  c0:	0f 90       	pop	r0
  c2:	0f 90       	pop	r0
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret
  ca:	89 81       	ldd	r24, Y+1	; 0x01
  cc:	9a 81       	ldd	r25, Y+2	; 0x02
  ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	06 96       	adiw	r24, 0x06	; 6
  dc:	0e 94 df 00 	call	0x1be	; 0x1be <longjmp>

000000e0 <yield>:
    enqueue(newp, &readyQ);
    ENABLE();
}

void yield(void) {
	DISABLE();
  e0:	f8 94       	cli
	enqueue(current, &readyQ);
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    initialized = 1;
}


static void enqueue(thread p, thread *queue) {
    p->next = NULL;
  ea:	fc 01       	movw	r30, r24
  ec:	15 82       	std	Z+5, r1	; 0x05
  ee:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
  f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_end>
  f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_end+0x1>
  f8:	10 97       	sbiw	r26, 0x00	; 0
  fa:	b9 f0       	breq	.+46     	; 0x12a <yield+0x4a>
  fc:	fd 01       	movw	r30, r26
  fe:	01 c0       	rjmp	.+2      	; 0x102 <yield+0x22>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 100:	f9 01       	movw	r30, r18
 102:	24 81       	ldd	r18, Z+4	; 0x04
 104:	35 81       	ldd	r19, Z+5	; 0x05
 106:	21 15       	cp	r18, r1
 108:	31 05       	cpc	r19, r1
 10a:	d1 f7       	brne	.-12     	; 0x100 <yield+0x20>
            q = q->next;
        q->next = p;
 10c:	95 83       	std	Z+5, r25	; 0x05
 10e:	84 83       	std	Z+4, r24	; 0x04
 110:	14 96       	adiw	r26, 0x04	; 4
 112:	2d 91       	ld	r18, X+
 114:	3c 91       	ld	r19, X
 116:	15 97       	sbiw	r26, 0x05	; 5
 118:	cd 01       	movw	r24, r26
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
        *queue = (*queue)->next;
 11a:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <__data_end+0x1>
 11e:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
}

void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 122:	0e 94 50 00 	call	0xa0	; 0xa0 <dispatch>
	ENABLE();
 126:	78 94       	sei
}
 128:	08 95       	ret
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
 12a:	00 97       	sbiw	r24, 0x00	; 0
 12c:	09 f4       	brne	.+2      	; 0x130 <yield+0x50>
 12e:	ff cf       	rjmp	.-2      	; 0x12e <yield+0x4e>
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f2 cf       	rjmp	.-28     	; 0x11a <yield+0x3a>

00000136 <__vector_7>:
	//if (stick_down==0) {
		//yield();
	//}
//}

ISR(TIMER1_COMPA_vect) {
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	4f 93       	push	r20
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	yield();
 158:	0e 94 70 00 	call	0xe0	; 0xe0 <yield>
	
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <setjmp>:
 17e:	dc 01       	movw	r26, r24
 180:	2d 92       	st	X+, r2
 182:	3d 92       	st	X+, r3
 184:	4d 92       	st	X+, r4
 186:	5d 92       	st	X+, r5
 188:	6d 92       	st	X+, r6
 18a:	7d 92       	st	X+, r7
 18c:	8d 92       	st	X+, r8
 18e:	9d 92       	st	X+, r9
 190:	ad 92       	st	X+, r10
 192:	bd 92       	st	X+, r11
 194:	cd 92       	st	X+, r12
 196:	dd 92       	st	X+, r13
 198:	ed 92       	st	X+, r14
 19a:	fd 92       	st	X+, r15
 19c:	0d 93       	st	X+, r16
 19e:	1d 93       	st	X+, r17
 1a0:	cd 93       	st	X+, r28
 1a2:	dd 93       	st	X+, r29
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	8d b7       	in	r24, 0x3d	; 61
 1aa:	8d 93       	st	X+, r24
 1ac:	8e b7       	in	r24, 0x3e	; 62
 1ae:	8d 93       	st	X+, r24
 1b0:	8f b7       	in	r24, 0x3f	; 63
 1b2:	8d 93       	st	X+, r24
 1b4:	ed 93       	st	X+, r30
 1b6:	fd 93       	st	X+, r31
 1b8:	88 27       	eor	r24, r24
 1ba:	99 27       	eor	r25, r25
 1bc:	09 94       	ijmp

000001be <longjmp>:
 1be:	dc 01       	movw	r26, r24
 1c0:	cb 01       	movw	r24, r22
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	91 05       	cpc	r25, r1
 1c6:	81 1d       	adc	r24, r1
 1c8:	2d 90       	ld	r2, X+
 1ca:	3d 90       	ld	r3, X+
 1cc:	4d 90       	ld	r4, X+
 1ce:	5d 90       	ld	r5, X+
 1d0:	6d 90       	ld	r6, X+
 1d2:	7d 90       	ld	r7, X+
 1d4:	8d 90       	ld	r8, X+
 1d6:	9d 90       	ld	r9, X+
 1d8:	ad 90       	ld	r10, X+
 1da:	bd 90       	ld	r11, X+
 1dc:	cd 90       	ld	r12, X+
 1de:	dd 90       	ld	r13, X+
 1e0:	ed 90       	ld	r14, X+
 1e2:	fd 90       	ld	r15, X+
 1e4:	0d 91       	ld	r16, X+
 1e6:	1d 91       	ld	r17, X+
 1e8:	cd 91       	ld	r28, X+
 1ea:	dd 91       	ld	r29, X+
 1ec:	ed 91       	ld	r30, X+
 1ee:	fd 91       	ld	r31, X+
 1f0:	0d 90       	ld	r0, X+
 1f2:	f8 94       	cli
 1f4:	fe bf       	out	0x3e, r31	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	ed bf       	out	0x3d, r30	; 61
 1fa:	ed 91       	ld	r30, X+
 1fc:	fd 91       	ld	r31, X+
 1fe:	09 94       	ijmp

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
